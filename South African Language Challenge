{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/toniashola/South-African-Language-Challenge/blob/main/South%20African%20Language%20Challenge\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "n1W1cbsImHyP"
      },
      "source": [
        "#### Import Libraries and Read In the Data\n",
        "\n",
        "Do not modify or remove any of the code in these cells."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WEao8ZuhmHyQ",
        "outputId": "bfa790d2-9423-4218-a56a-bc64b2f15b38"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "[nltk_data] Downloading package wordnet to /root/nltk_data...\n",
            "[nltk_data]   Package wordnet is already up-to-date!\n",
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Package stopwords is already up-to-date!\n",
            "[nltk_data] Downloading package omw-1.4 to /root/nltk_data...\n",
            "[nltk_data]   Package omw-1.4 is already up-to-date!\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "execution_count": 2,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "import nltk\n",
        "from nltk import TreebankWordTokenizer, SnowballStemmer\n",
        "from nltk.stem import WordNetLemmatizer\n",
        "from nltk.corpus import stopwords\n",
        "import string\n",
        "import urllib\n",
        "\n",
        "nltk.download('wordnet')\n",
        "nltk.download('stopwords')\n",
        "nltk.download('omw-1.4')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QF64LTjBmpnE"
      },
      "outputs": [],
      "source": [
        "# data analysis and wrangling libraries\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "\n",
        "# visualisation\n",
        "import matplotlib.pyplot as plt\n",
        "import seaborn as sns\n",
        "\n",
        "# preprocesssing\n",
        "import re\n",
        "import string\n",
        "from wordcloud import WordCloud\n",
        "import pickle\n",
        "\n",
        "#stopwords\n",
        "import nltk\n",
        "from nltk.corpus import stopwords\n",
        "stop = set(stopwords.words('english'))\n",
        "from collections import defaultdict\n",
        "from nltk.stem import WordNetLemmatizer\n",
        "\n",
        "\n",
        "# modelling\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from sklearn.linear_model import LogisticRegression\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.naive_bayes import MultinomialNB\n",
        "\n",
        "# model evaluation\n",
        "from sklearn.metrics import f1_score, precision_score, recall_score, confusion_matrix, accuracy_score, classification_report\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "punGr2l-m94H"
      },
      "outputs": [],
      "source": [
        "# Read training data from CSV file into a Dataframe\n",
        "df_train = pd.read_csv('/content/train_set.csv')\n",
        "# Read test data from CSV file into a Dataframe\n",
        "df_test = pd.read_csv('/content/test_set.csv')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "fAamNqlHnFOB",
        "outputId": "e38e42c4-028e-4907-e2d3-a5dead49c868"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-59a82ae1-24bf-4b7a-9837-abeeebfa4a22\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>lang_id</th>\n",
              "      <th>text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>xho</td>\n",
              "      <td>umgaqo-siseko wenza amalungiselelo kumaziko ax...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>xho</td>\n",
              "      <td>i-dha iya kuba nobulumko bokubeka umsebenzi na...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>eng</td>\n",
              "      <td>the province of kwazulu-natal department of tr...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>nso</td>\n",
              "      <td>o netefatša gore o ba file dilo ka moka tše le...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ven</td>\n",
              "      <td>khomishini ya ndinganyiso ya mbeu yo ewa maana...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-59a82ae1-24bf-4b7a-9837-abeeebfa4a22')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-59a82ae1-24bf-4b7a-9837-abeeebfa4a22 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-59a82ae1-24bf-4b7a-9837-abeeebfa4a22');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-66cd0fc0-cd01-44cb-b5fd-21effe184098\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-66cd0fc0-cd01-44cb-b5fd-21effe184098')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-66cd0fc0-cd01-44cb-b5fd-21effe184098 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "  lang_id                                               text\n",
              "0     xho  umgaqo-siseko wenza amalungiselelo kumaziko ax...\n",
              "1     xho  i-dha iya kuba nobulumko bokubeka umsebenzi na...\n",
              "2     eng  the province of kwazulu-natal department of tr...\n",
              "3     nso  o netefatša gore o ba file dilo ka moka tše le...\n",
              "4     ven  khomishini ya ndinganyiso ya mbeu yo ewa maana..."
            ]
          },
          "execution_count": 5,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#View train dataset\n",
        "df_train.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "BbVfkDLmnPCu",
        "outputId": "e6b36f65-8c2f-44a4-ab57-59757cdbe3e7"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-46fbc17d-e135-49a0-bf1e-9f4c47e00b33\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Mmasepala, fa maemo a a kgethegileng a letlele...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Uzakwaziswa ngokufaneleko nakungafuneka eminye...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Tshivhumbeo tshi fana na ngano dza vhathu.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Kube inja nelikati betingevakala kutsi titsini...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Winste op buitelandse valuta.</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-46fbc17d-e135-49a0-bf1e-9f4c47e00b33')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-46fbc17d-e135-49a0-bf1e-9f4c47e00b33 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-46fbc17d-e135-49a0-bf1e-9f4c47e00b33');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c99368fb-f730-4110-b611-fffec0335bac\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c99368fb-f730-4110-b611-fffec0335bac')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c99368fb-f730-4110-b611-fffec0335bac button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "   index                                               text\n",
              "0      1  Mmasepala, fa maemo a a kgethegileng a letlele...\n",
              "1      2  Uzakwaziswa ngokufaneleko nakungafuneka eminye...\n",
              "2      3         Tshivhumbeo tshi fana na ngano dza vhathu.\n",
              "3      4  Kube inja nelikati betingevakala kutsi titsini...\n",
              "4      5                      Winste op buitelandse valuta."
            ]
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "#View test dataset\n",
        "df_test.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kccGYjOcnT8U",
        "outputId": "bab196af-62a7-42c3-909f-ba084de3f152"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(33000, 2)"
            ]
          },
          "execution_count": 7,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df_train.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "kdtkSZaenZ3v",
        "outputId": "56749b95-b248-4341-d359-4f34203f8b92"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(5682, 2)"
            ]
          },
          "execution_count": 8,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df_test.shape"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "XeGK256QnhQ2",
        "outputId": "25cfadd8-ad16-473f-8455-585356b19bba"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 33000 entries, 0 to 32999\n",
            "Data columns (total 2 columns):\n",
            " #   Column   Non-Null Count  Dtype \n",
            "---  ------   --------------  ----- \n",
            " 0   lang_id  33000 non-null  object\n",
            " 1   text     33000 non-null  object\n",
            "dtypes: object(2)\n",
            "memory usage: 515.8+ KB\n"
          ]
        }
      ],
      "source": [
        "df_train.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0Imi8_Y4nmzC",
        "outputId": "3a1aa58b-0432-4ebe-bca2-2cebf1e81c5e"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 5682 entries, 0 to 5681\n",
            "Data columns (total 2 columns):\n",
            " #   Column  Non-Null Count  Dtype \n",
            "---  ------  --------------  ----- \n",
            " 0   index   5682 non-null   int64 \n",
            " 1   text    5682 non-null   object\n",
            "dtypes: int64(1), object(1)\n",
            "memory usage: 88.9+ KB\n"
          ]
        }
      ],
      "source": [
        "df_test.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "cGi-vxdqnpsM",
        "outputId": "d9e43b94-d0b5-4a77-8d0f-5e753ebdb50c"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "lang_id    0\n",
              "text       0\n",
              "dtype: int64"
            ]
          },
          "execution_count": 11,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df_train.isnull().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UZeLtd0Qnv3g",
        "outputId": "5bbae504-1649-492f-b31e-0a87bb27e1c3"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "index    0\n",
              "text     0\n",
              "dtype: int64"
            ]
          },
          "execution_count": 12,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df_test.isnull().sum()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aG5xdRVLn7SK",
        "outputId": "1a3e7937-c944-41ff-9caa-91648272db84"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "5599"
            ]
          },
          "execution_count": 13,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Identify and extract rows with duplicated 'message' and 'sentiment' values\n",
        "duplicates = df_train[df_train[['text', 'lang_id']].duplicated(keep=False)].count()\n",
        "\n",
        "# Display the DataFrame containing duplicate rows\n",
        "duplicates['text']"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6EkYdtUon91l",
        "outputId": "a42c331f-8120-405b-8ece-3ab2fd400536"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "ngokwesekhtjheni yomthetho ophathelene nalokhu unelungelo lokudlulisela isililo sakho kusomkhandlu wezehlalakuhle ngokutlola incwadi uyithumele e-adresini elandelako kungakapheli amalanga amatjhumi alithoba ukusukela mhlazana uthola incwadi le                                               17\n",
              "ukubhalelwa kuzalisa iimfuneko zomthetho ophathelene nalokhu kungawufelelisa umrholwakho naweqisa iinyanga ezintathu ngokulandelana ungawuthathi umrholwakho nakhona uzakufelela umrholo owuthole ngokungakafaneli kufuze uwubuyise                                                               14\n",
              "imali osalele ngayo emva nayo seyifakiwe emrholweni wakho wokuthoma nakungenzeka ukuthi imali le ibe yinengi ukudlula isilinganiso sephrovinsi yangekhenu izakuhlukaniswa ngeenyanga eziimbadlwana malungana nalokhu thintana ne-ofisi yezehlalakuhle yangekhenu nawufuna eminye imininingwana    13\n",
              "sibawa abafakazeli ababili esingakghona ukubathola umrholi womphakathi kunye nesikghwari esiwufundeleko umsebenzi wobukghwari abanqopheneko nomsebenzakho sibawa usithumelele ubufakazelo obutlolwe babe batlikitlelwa obubuya kubafakazeli ngenzasapha                                           10\n",
              "ku ya hi xiyenge xa xa nawu u ni mfanelo yo kombela ku tengisiwa nakambe eka xirho xa huvo-nkulu ya vapfuni hi papila eka kherefu leyi landzelaka ku nga si hundza wa masiku ku suka siku ro amukela papila leri                                                                                  10\n",
              "diforomo tsa kopo di ka tsewa gongwe go isiwa kwa yuniting ya patlisiso ya kelotefo ya makgetho a melelwane nomoro tsela ya ngaka lategan groenkloof tshwane go tloga ka mosupologo go ya go labotlhano magareng ga le                                                                             9\n",
              "vhabebi vhanu vha tea u ṋekana nga vhuṱanzi ha vhudzulapo havho kana thendelo ya vhudzulo ha tshoṱhe afrika tshipembe vhuṱanzi uvho vhu nga vha nga maṅwalo a vhune kana thendelo dza vhudzulo ha tshoṱhe                                                                                          8\n",
              "ngokomthetjhwana ungenza isibawo esitloliweko sokuvuselelwa komrholwakho kungakapheli amalanga amatjhumi alithoba ngemva kobana umrholwakho ujanyisiwe nawungahlala bekuphele isikhathesi ungakawuvuseleli umrholwakho uzakufelela ngaphandle kobana uthunyelelwe esinye isaziso                   7\n",
              "tshenzhemo kha ḽifhasi ḽoṱhe yo sumbedza uri u valiwa ha zwikolo na zwiimiswa zwa pfunzo ya nṱha mavhengele a u rengisa na fhethu ha mushumo a zwo ngo thusa kha u imisa u phaḓalala ha vhulwadze vhudzuloni hazwo zwo ita uri hu vhe na u thithisea zwihulwane kha zwa matshilisano               7\n",
              "tip-offs anonymous ke tshebeletso ya mohala wa fonofono e ikemetseng e kgontshang ho tlaleha diketso tse fosahetseng mosebetsing ntle le ho tsejwa ha ho motho ya tla o tseba ha o tlaleha ho itseng o ke ke wa tsejwa                                                                             6\n",
              "Name: text, dtype: int64"
            ]
          },
          "execution_count": 14,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Count the occurrences of each duplicate text\n",
        "text_counts = df_train['text'].value_counts()\n",
        "\n",
        "# Display the result\n",
        "text_counts.head(10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "_DaaoHFxoJTf",
        "outputId": "8c0c247f-81a4-4cfb-c1c7-b8c91589a3b2"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "                                                    text lang_id\n",
            "0      umgaqo-siseko wenza amalungiselelo kumaziko ax...     xho\n",
            "1      i-dha iya kuba nobulumko bokubeka umsebenzi na...     xho\n",
            "2      the province of kwazulu-natal department of tr...     eng\n",
            "3      o netefatša gore o ba file dilo ka moka tše le...     nso\n",
            "4      khomishini ya ndinganyiso ya mbeu yo ewa maana...     ven\n",
            "...                                                  ...     ...\n",
            "32994  manuel marin s ill-fated debt sources but very...     eng\n",
            "32995  popo ya dipolateforomo tse ke go tlisa boetele...     tsn\n",
            "32997  closing date for the submission of completed t...     eng\n",
            "32998  nawuphina umntu ofunyenwe enetyala phantsi kwa...     xho\n",
            "32999  mafapha a mang le ona a lokela ho etsa ditlale...     sot\n",
            "\n",
            "[29948 rows x 2 columns]\n"
          ]
        }
      ],
      "source": [
        "# Remove rows with duplicated 'text' values\n",
        "df_train_no_duplicates = df_train.drop_duplicates(subset=['text'], keep='first')\n",
        "\n",
        "# Display the DataFrame without duplicate rows based on 'text'\n",
        "print(df_train_no_duplicates[['text', 'lang_id']])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "la1iZHWjoMnA",
        "outputId": "b87ef156-3c6c-478a-9fff-bcc046caa717"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-c1b2212a-3dda-4804-9178-19689c3ca71e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>lang_id</th>\n",
              "      <th>text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>xho</td>\n",
              "      <td>umgaqo-siseko wenza amalungiselelo kumaziko ax...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>xho</td>\n",
              "      <td>i-dha iya kuba nobulumko bokubeka umsebenzi na...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>eng</td>\n",
              "      <td>the province of kwazulu-natal department of tr...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>nso</td>\n",
              "      <td>o netefatša gore o ba file dilo ka moka tše le...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ven</td>\n",
              "      <td>khomishini ya ndinganyiso ya mbeu yo ewa maana...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32994</th>\n",
              "      <td>eng</td>\n",
              "      <td>manuel marin s ill-fated debt sources but very...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32995</th>\n",
              "      <td>tsn</td>\n",
              "      <td>popo ya dipolateforomo tse ke go tlisa boetele...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32997</th>\n",
              "      <td>eng</td>\n",
              "      <td>closing date for the submission of completed t...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32998</th>\n",
              "      <td>xho</td>\n",
              "      <td>nawuphina umntu ofunyenwe enetyala phantsi kwa...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32999</th>\n",
              "      <td>sot</td>\n",
              "      <td>mafapha a mang le ona a lokela ho etsa ditlale...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>29948 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c1b2212a-3dda-4804-9178-19689c3ca71e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c1b2212a-3dda-4804-9178-19689c3ca71e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c1b2212a-3dda-4804-9178-19689c3ca71e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-3b8ed8cc-1f4c-4a86-9470-6975cd48e048\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3b8ed8cc-1f4c-4a86-9470-6975cd48e048')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-3b8ed8cc-1f4c-4a86-9470-6975cd48e048 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "      lang_id                                               text\n",
              "0         xho  umgaqo-siseko wenza amalungiselelo kumaziko ax...\n",
              "1         xho  i-dha iya kuba nobulumko bokubeka umsebenzi na...\n",
              "2         eng  the province of kwazulu-natal department of tr...\n",
              "3         nso  o netefatša gore o ba file dilo ka moka tše le...\n",
              "4         ven  khomishini ya ndinganyiso ya mbeu yo ewa maana...\n",
              "...       ...                                                ...\n",
              "32994     eng  manuel marin s ill-fated debt sources but very...\n",
              "32995     tsn  popo ya dipolateforomo tse ke go tlisa boetele...\n",
              "32997     eng  closing date for the submission of completed t...\n",
              "32998     xho  nawuphina umntu ofunyenwe enetyala phantsi kwa...\n",
              "32999     sot  mafapha a mang le ona a lokela ho etsa ditlale...\n",
              "\n",
              "[29948 rows x 2 columns]"
            ]
          },
          "execution_count": 16,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "df_eda = df_train_no_duplicates\n",
        "df_eda"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 819
        },
        "id": "nLhp6SiroV79",
        "outputId": "ca468326-6993-4080-8bbc-5938098d0a9c"
      },
      "outputs": [
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 1600x900 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "# plot relevant feature interactions\n",
        "# Create a pie chart to visualize the distribution of data in each class\n",
        "fig, axs = plt.subplots(figsize=(16, 9))\n",
        "\n",
        "# Set title of the pie chart\n",
        "fig.suptitle(\"Distribution of Data in Each Class\", fontweight='bold', fontsize=16)\n",
        "\n",
        "# Plot pie chart with increased font size for percentages and legend\n",
        "df_eda['lang_id'].value_counts().plot(kind='pie', autopct='%1.0f%%', colormap='Greens', wedgeprops=dict(edgecolor='black'), fontsize=14)\n",
        "\n",
        "# Set additional properties for better readability\n",
        "plt.title('lang_id Distribution', fontsize=16)\n",
        "plt.ylabel('')  # Remove y-axis label\n",
        "plt.legend(title=\"Language Category\", fontsize=12)\n",
        "\n",
        "# Show the pie chart\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 330
        },
        "id": "CwCJ5jK-ohAA",
        "outputId": "2d41506a-4af8-432c-f552-ec8b4bd492db"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-18-6482a6b2d402>:2: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_eda['text'] = df_eda['text'].str.lower()\n"
          ]
        },
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-ea83d92e-49b2-4e7b-a85e-9e2f224eada8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>lang_id</th>\n",
              "      <th>text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>xho</td>\n",
              "      <td>umgaqo-siseko wenza amalungiselelo kumaziko ax...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>xho</td>\n",
              "      <td>i-dha iya kuba nobulumko bokubeka umsebenzi na...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>eng</td>\n",
              "      <td>the province of kwazulu-natal department of tr...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>nso</td>\n",
              "      <td>o netefatša gore o ba file dilo ka moka tše le...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ven</td>\n",
              "      <td>khomishini ya ndinganyiso ya mbeu yo ewa maana...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ea83d92e-49b2-4e7b-a85e-9e2f224eada8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ea83d92e-49b2-4e7b-a85e-9e2f224eada8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ea83d92e-49b2-4e7b-a85e-9e2f224eada8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-164408a3-3256-425c-b180-57e59207eaab\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-164408a3-3256-425c-b180-57e59207eaab')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-164408a3-3256-425c-b180-57e59207eaab button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "  lang_id                                               text\n",
              "0     xho  umgaqo-siseko wenza amalungiselelo kumaziko ax...\n",
              "1     xho  i-dha iya kuba nobulumko bokubeka umsebenzi na...\n",
              "2     eng  the province of kwazulu-natal department of tr...\n",
              "3     nso  o netefatša gore o ba file dilo ka moka tše le...\n",
              "4     ven  khomishini ya ndinganyiso ya mbeu yo ewa maana..."
            ]
          },
          "execution_count": 18,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Convert all text in the 'message' column to lowercase\n",
        "df_eda['text'] = df_eda['text'].str.lower()\n",
        "\n",
        "# Display the updated DataFrame\n",
        "df_eda.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "FBPuXECHooMm",
        "outputId": "663b3754-0208-4cd4-fa74-1d98057a2bb0"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-ba40edd5-bbbb-4a35-80c2-b618f88932a4\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>lang_id</th>\n",
              "      <th>text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>xho</td>\n",
              "      <td>umgaqo-siseko wenza amalungiselelo kumaziko ax...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>xho</td>\n",
              "      <td>i-dha iya kuba nobulumko bokubeka umsebenzi na...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>eng</td>\n",
              "      <td>the province of kwazulu-natal department of tr...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>nso</td>\n",
              "      <td>o netefatša gore o ba file dilo ka moka tše le...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ven</td>\n",
              "      <td>khomishini ya ndinganyiso ya mbeu yo ewa maana...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32995</th>\n",
              "      <td>tsn</td>\n",
              "      <td>popo ya dipolateforomo tse ke go tlisa boetele...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32996</th>\n",
              "      <td>sot</td>\n",
              "      <td>modise mosadi na o ntse o sa utlwe hore thaban...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32997</th>\n",
              "      <td>eng</td>\n",
              "      <td>closing date for the submission of completed t...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32998</th>\n",
              "      <td>xho</td>\n",
              "      <td>nawuphina umntu ofunyenwe enetyala phantsi kwa...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32999</th>\n",
              "      <td>sot</td>\n",
              "      <td>mafapha a mang le ona a lokela ho etsa ditlale...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>33000 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ba40edd5-bbbb-4a35-80c2-b618f88932a4')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ba40edd5-bbbb-4a35-80c2-b618f88932a4 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ba40edd5-bbbb-4a35-80c2-b618f88932a4');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-893de58c-56b2-49e6-909f-f6e78b7d4952\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-893de58c-56b2-49e6-909f-f6e78b7d4952')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-893de58c-56b2-49e6-909f-f6e78b7d4952 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "      lang_id                                               text\n",
              "0         xho  umgaqo-siseko wenza amalungiselelo kumaziko ax...\n",
              "1         xho  i-dha iya kuba nobulumko bokubeka umsebenzi na...\n",
              "2         eng  the province of kwazulu-natal department of tr...\n",
              "3         nso  o netefatša gore o ba file dilo ka moka tše le...\n",
              "4         ven  khomishini ya ndinganyiso ya mbeu yo ewa maana...\n",
              "...       ...                                                ...\n",
              "32995     tsn  popo ya dipolateforomo tse ke go tlisa boetele...\n",
              "32996     sot  modise mosadi na o ntse o sa utlwe hore thaban...\n",
              "32997     eng  closing date for the submission of completed t...\n",
              "32998     xho  nawuphina umntu ofunyenwe enetyala phantsi kwa...\n",
              "32999     sot  mafapha a mang le ona a lokela ho etsa ditlale...\n",
              "\n",
              "[33000 rows x 2 columns]"
            ]
          },
          "execution_count": 19,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Create a cleaning dataset by copying the 'df_train' DataFrame\n",
        "df_clean = df_train.copy()\n",
        "\n",
        "# Display the cleaning dataset\n",
        "df_clean"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "abOJnA0yotit",
        "outputId": "b00931ea-0399-4e00-f2c2-8bca8163fb07"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-99a5484b-c1fa-41c1-8626-e56c85f6c6f0\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>Mmasepala, fa maemo a a kgethegileng a letlele...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>Uzakwaziswa ngokufaneleko nakungafuneka eminye...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>Tshivhumbeo tshi fana na ngano dza vhathu.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>Kube inja nelikati betingevakala kutsi titsini...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>Winste op buitelandse valuta.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5677</th>\n",
              "      <td>5678</td>\n",
              "      <td>You mark your ballot in private.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5678</th>\n",
              "      <td>5679</td>\n",
              "      <td>Ge o ka kgetha ka bowena go se šomiše Mofani k...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5679</th>\n",
              "      <td>5680</td>\n",
              "      <td>E Ka kopo etsa kgetho ya hao ka hloko, hobane ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5680</th>\n",
              "      <td>5681</td>\n",
              "      <td>TB ke bokudi ba PMB, mme Morero o tla lefella ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5681</th>\n",
              "      <td>5682</td>\n",
              "      <td>Vakatjhela iwebhusayidi yethu ku-www.</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5682 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-99a5484b-c1fa-41c1-8626-e56c85f6c6f0')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-99a5484b-c1fa-41c1-8626-e56c85f6c6f0 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-99a5484b-c1fa-41c1-8626-e56c85f6c6f0');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-107adb66-db94-467b-9afb-73168bf41fce\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-107adb66-db94-467b-9afb-73168bf41fce')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-107adb66-db94-467b-9afb-73168bf41fce button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "      index                                               text\n",
              "0         1  Mmasepala, fa maemo a a kgethegileng a letlele...\n",
              "1         2  Uzakwaziswa ngokufaneleko nakungafuneka eminye...\n",
              "2         3         Tshivhumbeo tshi fana na ngano dza vhathu.\n",
              "3         4  Kube inja nelikati betingevakala kutsi titsini...\n",
              "4         5                      Winste op buitelandse valuta.\n",
              "...     ...                                                ...\n",
              "5677   5678                   You mark your ballot in private.\n",
              "5678   5679  Ge o ka kgetha ka bowena go se šomiše Mofani k...\n",
              "5679   5680  E Ka kopo etsa kgetho ya hao ka hloko, hobane ...\n",
              "5680   5681  TB ke bokudi ba PMB, mme Morero o tla lefella ...\n",
              "5681   5682              Vakatjhela iwebhusayidi yethu ku-www.\n",
              "\n",
              "[5682 rows x 2 columns]"
            ]
          },
          "execution_count": 20,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Create a cleaning dataset by copying the 'df_test' DataFrame\n",
        "df_test_clean = df_test.copy()\n",
        "\n",
        "# Display the cleaning dataset\n",
        "df_test_clean"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "XrkFywnFoyfg",
        "outputId": "d9457b12-5a0a-4f6f-b799-acd33dc03d2a"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-4dc76d46-4ce8-4a29-83e6-c88a3ccadc2e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>lang_id</th>\n",
              "      <th>text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>xho</td>\n",
              "      <td>umgaqo-siseko wenza amalungiselelo kumaziko ax...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>xho</td>\n",
              "      <td>i-dha iya kuba nobulumko bokubeka umsebenzi na...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>eng</td>\n",
              "      <td>the province of kwazulu-natal department of tr...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>nso</td>\n",
              "      <td>o netefatša gore o ba file dilo ka moka tše le...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ven</td>\n",
              "      <td>khomishini ya ndinganyiso ya mbeu yo ewa maana...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32995</th>\n",
              "      <td>tsn</td>\n",
              "      <td>popo ya dipolateforomo tse ke go tlisa boetele...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32996</th>\n",
              "      <td>sot</td>\n",
              "      <td>modise mosadi na o ntse o sa utlwe hore thaban...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32997</th>\n",
              "      <td>eng</td>\n",
              "      <td>closing date for the submission of completed t...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32998</th>\n",
              "      <td>xho</td>\n",
              "      <td>nawuphina umntu ofunyenwe enetyala phantsi kwa...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>32999</th>\n",
              "      <td>sot</td>\n",
              "      <td>mafapha a mang le ona a lokela ho etsa ditlale...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>33000 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4dc76d46-4ce8-4a29-83e6-c88a3ccadc2e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4dc76d46-4ce8-4a29-83e6-c88a3ccadc2e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4dc76d46-4ce8-4a29-83e6-c88a3ccadc2e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0ce458a5-2ae2-4314-a471-e3537106a121\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0ce458a5-2ae2-4314-a471-e3537106a121')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0ce458a5-2ae2-4314-a471-e3537106a121 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "      lang_id                                               text\n",
              "0         xho  umgaqo-siseko wenza amalungiselelo kumaziko ax...\n",
              "1         xho  i-dha iya kuba nobulumko bokubeka umsebenzi na...\n",
              "2         eng  the province of kwazulu-natal department of tr...\n",
              "3         nso  o netefatša gore o ba file dilo ka moka tše le...\n",
              "4         ven  khomishini ya ndinganyiso ya mbeu yo ewa maana...\n",
              "...       ...                                                ...\n",
              "32995     tsn  popo ya dipolateforomo tse ke go tlisa boetele...\n",
              "32996     sot  modise mosadi na o ntse o sa utlwe hore thaban...\n",
              "32997     eng  closing date for the submission of completed t...\n",
              "32998     xho  nawuphina umntu ofunyenwe enetyala phantsi kwa...\n",
              "32999     sot  mafapha a mang le ona a lokela ho etsa ditlale...\n",
              "\n",
              "[33000 rows x 2 columns]"
            ]
          },
          "execution_count": 21,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Convert all text in the 'text' column to lowercase\n",
        "df_clean['text'] = df_clean['text'].str.lower()\n",
        "\n",
        "# Display the updated DataFrame\n",
        "df_clean"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 423
        },
        "id": "dv8IFXO6o3uT",
        "outputId": "f3cc0c0c-00c8-4419-aa39-330dbc786075"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "\n",
              "  <div id=\"df-b5e75c51-bcdd-4c12-9578-160033ef44ea\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>umgaqo-siseko wenza amalungiselelo kumaziko ax...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>i-dha iya kuba nobulumko bokubeka umsebenzi na...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>the province of kwazulu-natal department of tr...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>o netefatša gore o ba file dilo ka moka tše le...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>khomishini ya ndinganyiso ya mbeu yo ewa maana...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5677</th>\n",
              "      <td>5678</td>\n",
              "      <td>umthethosisekelo ugunyaza itjhuguluko ebujamen...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5678</th>\n",
              "      <td>5679</td>\n",
              "      <td>dikhampani kapa kgwebo tsa motho ya mong di lo...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5679</th>\n",
              "      <td>5680</td>\n",
              "      <td>dingaka di dumela hore motho ya tsubang dithet...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5680</th>\n",
              "      <td>5681</td>\n",
              "      <td>tumelo yeo e fiwago ka ntle ga afrika borwa e ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5681</th>\n",
              "      <td>5682</td>\n",
              "      <td>bouto e tee go dihektara tše dingwe le tše din...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5682 rows × 2 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b5e75c51-bcdd-4c12-9578-160033ef44ea')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b5e75c51-bcdd-4c12-9578-160033ef44ea button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b5e75c51-bcdd-4c12-9578-160033ef44ea');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5bdfb9e5-ee14-4626-a84d-31251bec1150\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5bdfb9e5-ee14-4626-a84d-31251bec1150')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5bdfb9e5-ee14-4626-a84d-31251bec1150 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "text/plain": [
              "      index                                               text\n",
              "0         1  umgaqo-siseko wenza amalungiselelo kumaziko ax...\n",
              "1         2  i-dha iya kuba nobulumko bokubeka umsebenzi na...\n",
              "2         3  the province of kwazulu-natal department of tr...\n",
              "3         4  o netefatša gore o ba file dilo ka moka tše le...\n",
              "4         5  khomishini ya ndinganyiso ya mbeu yo ewa maana...\n",
              "...     ...                                                ...\n",
              "5677   5678  umthethosisekelo ugunyaza itjhuguluko ebujamen...\n",
              "5678   5679  dikhampani kapa kgwebo tsa motho ya mong di lo...\n",
              "5679   5680  dingaka di dumela hore motho ya tsubang dithet...\n",
              "5680   5681  tumelo yeo e fiwago ka ntle ga afrika borwa e ...\n",
              "5681   5682  bouto e tee go dihektara tše dingwe le tše din...\n",
              "\n",
              "[5682 rows x 2 columns]"
            ]
          },
          "execution_count": 22,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Convert all text in the 'text' column to lowercase\n",
        "df_test_clean['text'] = df_clean['text'].str.lower()\n",
        "\n",
        "# Display the updated DataFrame\n",
        "df_test_clean"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "gMxf-cUuo9cy",
        "outputId": "60e6638c-771c-4397-e996-aa8b362fc493"
      },
      "outputs": [
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-23-2841f8515916>:6: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_eda['text'] = df_eda['text'].apply(remove_punctuation)\n"
          ]
        }
      ],
      "source": [
        "import string\n",
        "\n",
        "def remove_punctuation(text):\n",
        "    return text.translate(str.maketrans(\"\", \"\", string.punctuation))\n",
        "\n",
        "df_eda['text'] = df_eda['text'].apply(remove_punctuation)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9VTRTl-LpCie",
        "outputId": "6a4ef37d-51bd-4d8f-dadd-1767d4808a51"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "      index                                               text\n",
            "0         1  umgaqosiseko wenza amalungiselelo kumaziko axh...\n",
            "1         2  idha iya kuba nobulumko bokubeka umsebenzi nap...\n",
            "2         3  the province of kwazulunatal department of tra...\n",
            "3         4  o netefatša gore o ba file dilo ka moka tše le...\n",
            "4         5  khomishini ya ndinganyiso ya mbeu yo ewa maana...\n",
            "...     ...                                                ...\n",
            "5677   5678  umthethosisekelo ugunyaza itjhuguluko ebujamen...\n",
            "5678   5679  dikhampani kapa kgwebo tsa motho ya mong di lo...\n",
            "5679   5680  dingaka di dumela hore motho ya tsubang dithet...\n",
            "5680   5681  tumelo yeo e fiwago ka ntle ga afrika borwa e ...\n",
            "5681   5682  bouto e tee go dihektara tše dingwe le tše din...\n",
            "\n",
            "[5682 rows x 2 columns]\n"
          ]
        }
      ],
      "source": [
        "# Define a function to remove punctuation\n",
        "def remove_punctuation(text):\n",
        "    if pd.isnull(text):\n",
        "        return text  # Return NaN if the input is NaN\n",
        "    else:\n",
        "        return text.translate(str.maketrans(\"\", \"\", string.punctuation))\n",
        "\n",
        "# Apply the remove_punctuation function to the 'text' column in df_test_clean\n",
        "df_test_clean['text'] = df_test_clean['text'].apply(remove_punctuation)\n",
        "\n",
        "# Display the cleaned DataFrame\n",
        "print(df_test_clean)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3ndwSELtpSce",
        "outputId": "e3609dc1-78cb-4c1b-e3a6-d1a1192cf3a8"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "      lang_id                                               text  \\\n",
            "0         xho  umgaqosiseko wenza amalungiselelo kumaziko axh...   \n",
            "1         xho  idha iya kuba nobulumko bokubeka umsebenzi nap...   \n",
            "2         eng  the province of kwazulunatal department of tra...   \n",
            "3         nso  o netefatša gore o ba file dilo ka moka tše le...   \n",
            "4         ven  khomishini ya ndinganyiso ya mbeu yo ewa maana...   \n",
            "...       ...                                                ...   \n",
            "32994     eng  manuel marin s illfated debt sources but very ...   \n",
            "32995     tsn  popo ya dipolateforomo tse ke go tlisa boetele...   \n",
            "32997     eng  closing date for the submission of completed t...   \n",
            "32998     xho  nawuphina umntu ofunyenwe enetyala phantsi kwa...   \n",
            "32999     sot  mafapha a mang le ona a lokela ho etsa ditlale...   \n",
            "\n",
            "       lang_id_encoded  \n",
            "0                    9  \n",
            "1                    9  \n",
            "2                    1  \n",
            "3                    3  \n",
            "4                    8  \n",
            "...                ...  \n",
            "32994                1  \n",
            "32995                6  \n",
            "32997                1  \n",
            "32998                9  \n",
            "32999                4  \n",
            "\n",
            "[29948 rows x 3 columns]\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "<ipython-input-25-a7dfa7f45822>:7: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  df_eda['lang_id_encoded'] = label_encoder.fit_transform(df_eda['lang_id'])\n"
          ]
        }
      ],
      "source": [
        "from sklearn.preprocessing import LabelEncoder\n",
        "# Initialize the LabelEncoder\n",
        "# Initialize the LabelEncoder\n",
        "label_encoder = LabelEncoder()\n",
        "\n",
        "# Fit and transform the labels\n",
        "df_eda['lang_id_encoded'] = label_encoder.fit_transform(df_eda['lang_id'])\n",
        "\n",
        "# Display the original DataFrame with encoded values\n",
        "print(df_eda)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6dd6ee8c"
      },
      "outputs": [],
      "source": [
        "df_eda = df_eda.drop('lang_id', axis=1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QF3VOGAXqX8D"
      },
      "outputs": [],
      "source": [
        "# Initialize Vectorizer\n",
        "vectorizer = CountVectorizer()\n",
        "count_vec_train = CountVectorizer(ngram_range=(4,5), analyzer='char', min_df=1, max_df =0.45, max_features=50000) # Change max features to include more data\n",
        "\n",
        "# Fit vectoriser on text data:\n",
        "vec_text_train = count_vec_train.fit_transform(df_eda[\"text\"])\n",
        "\n",
        "# Transform both test set for 'count'\n",
        "vec_text_test = count_vec_train.transform(df_test_clean[\"text\"])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 273
        },
        "id": "otycyESXqj21",
        "outputId": "7b84a18e-542b-41bf-a166-370f67549437"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    a a   a a    a af   a am   a b   a ba   a be   a bo   a bu   a c  ...  \\\n",
              "0     0      0      0      0     0      0      0      0      0     0  ...   \n",
              "1     0      0      0      0     0      0      0      0      0     0  ...   \n",
              "2     0      0      0      0     0      0      0      0      0     0  ...   \n",
              "3     2      2      0      0     1      0      0      1      0     0  ...   \n",
              "4     0      0      0      0     0      0      0      0      0     0  ...   \n",
              "\n",
              "   ṱhis  ṱhise  ṱhoh  ṱhoho  ṱhoḓ  ṱo ḓ  ṱuku  ṱuku   ṱuwe  ṱuwed  \n",
              "0     0      0     0      0     0     0     0      0     0      0  \n",
              "1     0      0     0      0     0     0     0      0     0      0  \n",
              "2     0      0     0      0     0     0     0      0     0      0  \n",
              "3     0      0     0      0     0     0     0      0     0      0  \n",
              "4     0      0     0      0     0     0     0      0     0      0  \n",
              "\n",
              "[5 rows x 50000 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-abdedd4c-30b2-4cb2-b056-7072be244897\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>a a</th>\n",
              "      <th>a a</th>\n",
              "      <th>a af</th>\n",
              "      <th>a am</th>\n",
              "      <th>a b</th>\n",
              "      <th>a ba</th>\n",
              "      <th>a be</th>\n",
              "      <th>a bo</th>\n",
              "      <th>a bu</th>\n",
              "      <th>a c</th>\n",
              "      <th>...</th>\n",
              "      <th>ṱhis</th>\n",
              "      <th>ṱhise</th>\n",
              "      <th>ṱhoh</th>\n",
              "      <th>ṱhoho</th>\n",
              "      <th>ṱhoḓ</th>\n",
              "      <th>ṱo ḓ</th>\n",
              "      <th>ṱuku</th>\n",
              "      <th>ṱuku</th>\n",
              "      <th>ṱuwe</th>\n",
              "      <th>ṱuwed</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 50000 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-abdedd4c-30b2-4cb2-b056-7072be244897')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-abdedd4c-30b2-4cb2-b056-7072be244897 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-abdedd4c-30b2-4cb2-b056-7072be244897');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0717a61a-5e6e-40d1-b51b-8bba5f58deb6\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0717a61a-5e6e-40d1-b51b-8bba5f58deb6')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0717a61a-5e6e-40d1-b51b-8bba5f58deb6 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ],
      "source": [
        "sparse_vec_msg_train = pd.DataFrame.sparse.from_spmatrix(vec_text_train, columns = count_vec_train.get_feature_names_out())\n",
        "sparse_vec_msg_train.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 273
        },
        "id": "gYzSQO7-qoL3",
        "outputId": "72a22bdc-fa14-47cc-8064-b1a3bba57f83"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    a a   a a    a af   a am   a b   a ba   a be   a bo   a bu   a c  ...  \\\n",
              "0     0      0      0      0     0      0      0      0      0     0  ...   \n",
              "1     0      0      0      0     0      0      0      0      0     0  ...   \n",
              "2     0      0      0      0     0      0      0      0      0     0  ...   \n",
              "3     2      2      0      0     1      0      0      1      0     0  ...   \n",
              "4     0      0      0      0     0      0      0      0      0     0  ...   \n",
              "\n",
              "   ṱhis  ṱhise  ṱhoh  ṱhoho  ṱhoḓ  ṱo ḓ  ṱuku  ṱuku   ṱuwe  ṱuwed  \n",
              "0     0      0     0      0     0     0     0      0     0      0  \n",
              "1     0      0     0      0     0     0     0      0     0      0  \n",
              "2     0      0     0      0     0     0     0      0     0      0  \n",
              "3     0      0     0      0     0     0     0      0     0      0  \n",
              "4     0      0     0      0     0     0     0      0     0      0  \n",
              "\n",
              "[5 rows x 50000 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-2b3b4766-1d51-4721-a192-7c658352c0a2\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>a a</th>\n",
              "      <th>a a</th>\n",
              "      <th>a af</th>\n",
              "      <th>a am</th>\n",
              "      <th>a b</th>\n",
              "      <th>a ba</th>\n",
              "      <th>a be</th>\n",
              "      <th>a bo</th>\n",
              "      <th>a bu</th>\n",
              "      <th>a c</th>\n",
              "      <th>...</th>\n",
              "      <th>ṱhis</th>\n",
              "      <th>ṱhise</th>\n",
              "      <th>ṱhoh</th>\n",
              "      <th>ṱhoho</th>\n",
              "      <th>ṱhoḓ</th>\n",
              "      <th>ṱo ḓ</th>\n",
              "      <th>ṱuku</th>\n",
              "      <th>ṱuku</th>\n",
              "      <th>ṱuwe</th>\n",
              "      <th>ṱuwed</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 50000 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2b3b4766-1d51-4721-a192-7c658352c0a2')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-2b3b4766-1d51-4721-a192-7c658352c0a2 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-2b3b4766-1d51-4721-a192-7c658352c0a2');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d914c75f-1bc9-47e3-8fe1-69d68796d252\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d914c75f-1bc9-47e3-8fe1-69d68796d252')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d914c75f-1bc9-47e3-8fe1-69d68796d252 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ],
      "source": [
        "sparse_vec_msg_test = pd.DataFrame.sparse.from_spmatrix(vec_text_test, columns = count_vec_train.get_feature_names_out())\n",
        "sparse_vec_msg_test.head()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Adding the dataframes together\n",
        "df_vectorized_clean = pd.concat([df_eda.reset_index(drop=True), sparse_vec_msg_train.reset_index(drop=True)], axis=1)\n",
        "df_vectorized_clean.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 568
        },
        "id": "7DRYkjR9sT6X",
        "outputId": "0f386c88-2e68-4ba6-ac53-91afc93abc0f"
      },
      "execution_count": 32,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                text  lang_id_encoded   a a  \\\n",
              "0  umgaqosiseko wenza amalungiselelo kumaziko axh...                9     0   \n",
              "1  idha iya kuba nobulumko bokubeka umsebenzi nap...                9     0   \n",
              "2  the province of kwazulunatal department of tra...                1     0   \n",
              "3  o netefatša gore o ba file dilo ka moka tše le...                3     2   \n",
              "4  khomishini ya ndinganyiso ya mbeu yo ewa maana...                8     0   \n",
              "\n",
              "    a a    a af   a am   a b   a ba   a be   a bo  ...  ṱhis  ṱhise  ṱhoh  \\\n",
              "0      0      0      0     0      0      0      0  ...     0      0     0   \n",
              "1      0      0      0     0      0      0      0  ...     0      0     0   \n",
              "2      0      0      0     0      0      0      0  ...     0      0     0   \n",
              "3      2      0      0     1      0      0      1  ...     0      0     0   \n",
              "4      0      0      0     0      0      0      0  ...     0      0     0   \n",
              "\n",
              "   ṱhoho  ṱhoḓ  ṱo ḓ  ṱuku  ṱuku   ṱuwe  ṱuwed  \n",
              "0      0     0     0     0      0     0      0  \n",
              "1      0     0     0     0      0     0      0  \n",
              "2      0     0     0     0      0     0      0  \n",
              "3      0     0     0     0      0     0      0  \n",
              "4      0     0     0     0      0     0      0  \n",
              "\n",
              "[5 rows x 50002 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ae854c2d-04d5-4ab3-8bed-3bab9a4da317\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>text</th>\n",
              "      <th>lang_id_encoded</th>\n",
              "      <th>a a</th>\n",
              "      <th>a a</th>\n",
              "      <th>a af</th>\n",
              "      <th>a am</th>\n",
              "      <th>a b</th>\n",
              "      <th>a ba</th>\n",
              "      <th>a be</th>\n",
              "      <th>a bo</th>\n",
              "      <th>...</th>\n",
              "      <th>ṱhis</th>\n",
              "      <th>ṱhise</th>\n",
              "      <th>ṱhoh</th>\n",
              "      <th>ṱhoho</th>\n",
              "      <th>ṱhoḓ</th>\n",
              "      <th>ṱo ḓ</th>\n",
              "      <th>ṱuku</th>\n",
              "      <th>ṱuku</th>\n",
              "      <th>ṱuwe</th>\n",
              "      <th>ṱuwed</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>umgaqosiseko wenza amalungiselelo kumaziko axh...</td>\n",
              "      <td>9</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>idha iya kuba nobulumko bokubeka umsebenzi nap...</td>\n",
              "      <td>9</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>the province of kwazulunatal department of tra...</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>o netefatša gore o ba file dilo ka moka tše le...</td>\n",
              "      <td>3</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>khomishini ya ndinganyiso ya mbeu yo ewa maana...</td>\n",
              "      <td>8</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 50002 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ae854c2d-04d5-4ab3-8bed-3bab9a4da317')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ae854c2d-04d5-4ab3-8bed-3bab9a4da317 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ae854c2d-04d5-4ab3-8bed-3bab9a4da317');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ba697c39-d5d8-4d1d-99ad-258aa7db3723\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ba697c39-d5d8-4d1d-99ad-258aa7db3723')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ba697c39-d5d8-4d1d-99ad-258aa7db3723 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 32
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Adding the dataframes together\n",
        "df_vectorized_test = pd.concat([df_test_clean.reset_index(drop=True), sparse_vec_msg_test.reset_index(drop=True)], axis=1)\n",
        "df_vectorized_test.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 568
        },
        "id": "ct2vOXcmsfza",
        "outputId": "2c8bde01-ce2b-4b7e-ebd0-298ba6f4cb3c"
      },
      "execution_count": 33,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   index                                               text   a a   a a   \\\n",
              "0      1  umgaqosiseko wenza amalungiselelo kumaziko axh...     0      0   \n",
              "1      2  idha iya kuba nobulumko bokubeka umsebenzi nap...     0      0   \n",
              "2      3  the province of kwazulunatal department of tra...     0      0   \n",
              "3      4  o netefatša gore o ba file dilo ka moka tše le...     2      2   \n",
              "4      5  khomishini ya ndinganyiso ya mbeu yo ewa maana...     0      0   \n",
              "\n",
              "    a af   a am   a b   a ba   a be   a bo  ...  ṱhis  ṱhise  ṱhoh  ṱhoho  \\\n",
              "0      0      0     0      0      0      0  ...     0      0     0      0   \n",
              "1      0      0     0      0      0      0  ...     0      0     0      0   \n",
              "2      0      0     0      0      0      0  ...     0      0     0      0   \n",
              "3      0      0     1      0      0      1  ...     0      0     0      0   \n",
              "4      0      0     0      0      0      0  ...     0      0     0      0   \n",
              "\n",
              "   ṱhoḓ  ṱo ḓ  ṱuku  ṱuku   ṱuwe  ṱuwed  \n",
              "0     0     0     0      0     0      0  \n",
              "1     0     0     0      0     0      0  \n",
              "2     0     0     0      0     0      0  \n",
              "3     0     0     0      0     0      0  \n",
              "4     0     0     0      0     0      0  \n",
              "\n",
              "[5 rows x 50002 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c8195605-6f01-47ec-9da5-30d7a375066b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>text</th>\n",
              "      <th>a a</th>\n",
              "      <th>a a</th>\n",
              "      <th>a af</th>\n",
              "      <th>a am</th>\n",
              "      <th>a b</th>\n",
              "      <th>a ba</th>\n",
              "      <th>a be</th>\n",
              "      <th>a bo</th>\n",
              "      <th>...</th>\n",
              "      <th>ṱhis</th>\n",
              "      <th>ṱhise</th>\n",
              "      <th>ṱhoh</th>\n",
              "      <th>ṱhoho</th>\n",
              "      <th>ṱhoḓ</th>\n",
              "      <th>ṱo ḓ</th>\n",
              "      <th>ṱuku</th>\n",
              "      <th>ṱuku</th>\n",
              "      <th>ṱuwe</th>\n",
              "      <th>ṱuwed</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>umgaqosiseko wenza amalungiselelo kumaziko axh...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2</td>\n",
              "      <td>idha iya kuba nobulumko bokubeka umsebenzi nap...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>3</td>\n",
              "      <td>the province of kwazulunatal department of tra...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>4</td>\n",
              "      <td>o netefatša gore o ba file dilo ka moka tše le...</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5</td>\n",
              "      <td>khomishini ya ndinganyiso ya mbeu yo ewa maana...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 50002 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c8195605-6f01-47ec-9da5-30d7a375066b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c8195605-6f01-47ec-9da5-30d7a375066b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c8195605-6f01-47ec-9da5-30d7a375066b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-fb4df3e2-2d2d-48de-9c27-183d3fac64ec\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-fb4df3e2-2d2d-48de-9c27-183d3fac64ec')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-fb4df3e2-2d2d-48de-9c27-183d3fac64ec button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Remove index form both training and test datasets\n",
        "df_vectorized_test = df_vectorized_test.drop(\"index\", axis=1)\n",
        "\n",
        "df_vectorized_test.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 568
        },
        "id": "BhyDBrn-tVXZ",
        "outputId": "8683979f-ef4b-400e-bfb4-f898c324843f"
      },
      "execution_count": 36,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "                                                text   a a   a a    a af  \\\n",
              "0  umgaqosiseko wenza amalungiselelo kumaziko axh...     0      0      0   \n",
              "1  idha iya kuba nobulumko bokubeka umsebenzi nap...     0      0      0   \n",
              "2  the province of kwazulunatal department of tra...     0      0      0   \n",
              "3  o netefatša gore o ba file dilo ka moka tše le...     2      2      0   \n",
              "4  khomishini ya ndinganyiso ya mbeu yo ewa maana...     0      0      0   \n",
              "\n",
              "    a am   a b   a ba   a be   a bo   a bu  ...  ṱhis  ṱhise  ṱhoh  ṱhoho  \\\n",
              "0      0     0      0      0      0      0  ...     0      0     0      0   \n",
              "1      0     0      0      0      0      0  ...     0      0     0      0   \n",
              "2      0     0      0      0      0      0  ...     0      0     0      0   \n",
              "3      0     1      0      0      1      0  ...     0      0     0      0   \n",
              "4      0     0      0      0      0      0  ...     0      0     0      0   \n",
              "\n",
              "   ṱhoḓ  ṱo ḓ  ṱuku  ṱuku   ṱuwe  ṱuwed  \n",
              "0     0     0     0      0     0      0  \n",
              "1     0     0     0      0     0      0  \n",
              "2     0     0     0      0     0      0  \n",
              "3     0     0     0      0     0      0  \n",
              "4     0     0     0      0     0      0  \n",
              "\n",
              "[5 rows x 50001 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4427aa0d-c045-4e4b-9e8e-b2a1c6b92c28\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>text</th>\n",
              "      <th>a a</th>\n",
              "      <th>a a</th>\n",
              "      <th>a af</th>\n",
              "      <th>a am</th>\n",
              "      <th>a b</th>\n",
              "      <th>a ba</th>\n",
              "      <th>a be</th>\n",
              "      <th>a bo</th>\n",
              "      <th>a bu</th>\n",
              "      <th>...</th>\n",
              "      <th>ṱhis</th>\n",
              "      <th>ṱhise</th>\n",
              "      <th>ṱhoh</th>\n",
              "      <th>ṱhoho</th>\n",
              "      <th>ṱhoḓ</th>\n",
              "      <th>ṱo ḓ</th>\n",
              "      <th>ṱuku</th>\n",
              "      <th>ṱuku</th>\n",
              "      <th>ṱuwe</th>\n",
              "      <th>ṱuwed</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>umgaqosiseko wenza amalungiselelo kumaziko axh...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>idha iya kuba nobulumko bokubeka umsebenzi nap...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>the province of kwazulunatal department of tra...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>o netefatša gore o ba file dilo ka moka tše le...</td>\n",
              "      <td>2</td>\n",
              "      <td>2</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>1</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>khomishini ya ndinganyiso ya mbeu yo ewa maana...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>5 rows × 50001 columns</p>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4427aa0d-c045-4e4b-9e8e-b2a1c6b92c28')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4427aa0d-c045-4e4b-9e8e-b2a1c6b92c28 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4427aa0d-c045-4e4b-9e8e-b2a1c6b92c28');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-03a84f48-11b3-4475-aef3-3f2c0779f8d7\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-03a84f48-11b3-4475-aef3-3f2c0779f8d7')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-03a84f48-11b3-4475-aef3-3f2c0779f8d7 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 36
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Extracting the response variable from the training dataset\n",
        "y_train= df_vectorized_clean[:len(df_vectorized_clean)][['lang_id_encoded']]\n",
        "\n",
        "# Separating predictor variables from response variable\n",
        "x_train = df_vectorized_clean[:len(df_vectorized_clean)].drop(\"lang_id_encoded\", axis = \"columns\")"
      ],
      "metadata": {
        "id": "0aFHP0M9tftF"
      },
      "execution_count": 37,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "#splitting the dataset into training and testing set\n",
        "X_train, X_test, y_train, y_test = train_test_split(x_train, y_train, test_size=0.2, random_state=42)"
      ],
      "metadata": {
        "id": "Hkz1bZqItrE1"
      },
      "execution_count": 38,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from sklearn.svm import SVC\n",
        "from sklearn.preprocessing import LabelEncoder\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score, classification_report\n",
        "\n",
        "# Assuming df_vectorized_clean contains 'text' and 'lang_id_encoded' columns\n",
        "\n",
        "# Extracting the response variable\n",
        "y_train = df_vectorized_clean[:len(df_vectorized_clean)]['lang_id_encoded']\n",
        "\n",
        "# Separating predictor variables from the response variable\n",
        "X_train = df_vectorized_clean[:len(df_vectorized_clean)].drop(\"lang_id_encoded\", axis=\"columns\")\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size=0.2, random_state=42)\n",
        "\n",
        "# Create a pipeline with CountVectorizer and Support Vector Machine\n",
        "pipeline_svm = Pipeline([\n",
        "    ('vectorizer', CountVectorizer()),\n",
        "    ('classifier', SVC(kernel='linear', random_state=42))\n",
        "])\n",
        "\n",
        "# Fit the pipeline on the training data\n",
        "pipeline_svm.fit(X_train['text'], y_train)\n",
        "\n",
        "# Predict on the test data\n",
        "y_pred_svm = pipeline_svm.predict(X_test['text'])\n",
        "\n",
        "# Evaluate the SVM model\n",
        "accuracy_svm = accuracy_score(y_test, y_pred_svm)\n",
        "classification_rep_svm = classification_report(y_test, y_pred_svm)\n",
        "\n",
        "# Print the results for SVM\n",
        "print(\"SVM Model:\")\n",
        "print(f\"Accuracy: {accuracy_svm}\")\n",
        "print(\"\\nClassification Report:\\n\", classification_rep_svm)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1BTYYqQCuYQp",
        "outputId": "9dd31e92-d28d-4cdc-85df-997caca6c03c"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "SVM Model:\n",
            "Accuracy: 0.9944908180300501\n",
            "\n",
            "Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      0.99      1.00       553\n",
            "           1       1.00      1.00      1.00       603\n",
            "           2       0.99      0.98      0.98       473\n",
            "           3       1.00      1.00      1.00       559\n",
            "           4       1.00      1.00      1.00       606\n",
            "           5       0.99      1.00      0.99       481\n",
            "           6       1.00      1.00      1.00       543\n",
            "           7       1.00      1.00      1.00       548\n",
            "           8       1.00      1.00      1.00       509\n",
            "           9       0.98      0.99      0.99       503\n",
            "          10       0.99      0.98      0.98       612\n",
            "\n",
            "    accuracy                           0.99      5990\n",
            "   macro avg       0.99      0.99      0.99      5990\n",
            "weighted avg       0.99      0.99      0.99      5990\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from sklearn.ensemble import RandomForestClassifier\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score, classification_report\n",
        "\n",
        "# Assuming df_vectorized_clean contains 'text' and 'lang_id_encoded' columns\n",
        "\n",
        "# Extracting the response variable\n",
        "y_train = df_vectorized_clean[:len(df_vectorized_clean)]['lang_id_encoded']\n",
        "\n",
        "# Separating predictor variables from the response variable\n",
        "X_train = df_vectorized_clean[:len(df_vectorized_clean)].drop(\"lang_id_encoded\", axis=\"columns\")\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size=0.2, random_state=42)\n",
        "\n",
        "# Create a pipeline with CountVectorizer and Random Forest Classifier\n",
        "pipeline_rf = Pipeline([\n",
        "    ('vectorizer', CountVectorizer()),\n",
        "    ('classifier', RandomForestClassifier(random_state=42))\n",
        "])\n",
        "\n",
        "# Fit the pipeline on the training data\n",
        "pipeline_rf.fit(X_train['text'], y_train)\n",
        "\n",
        "# Predict on the test data\n",
        "y_pred_rf = pipeline_rf.predict(X_test['text'])\n",
        "\n",
        "# Evaluate the Random Forest model\n",
        "accuracy_rf = accuracy_score(y_test, y_pred_rf)\n",
        "classification_rep_rf = classification_report(y_test, y_pred_rf)\n",
        "\n",
        "# Print the results for Random Forest\n",
        "print(\"Random Forest Model:\")\n",
        "print(f\"Accuracy: {accuracy_rf}\")\n",
        "print(\"\\nClassification Report:\\n\", classification_rep_rf)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iITZekJovZe2",
        "outputId": "2cea10f4-68a5-4305-fb26-3b1c2aa5f4a6"
      },
      "execution_count": 40,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Random Forest Model:\n",
            "Accuracy: 0.9831385642737897\n",
            "\n",
            "Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00       553\n",
            "           1       0.99      1.00      1.00       603\n",
            "           2       0.98      0.92      0.94       473\n",
            "           3       1.00      0.99      1.00       559\n",
            "           4       1.00      1.00      1.00       606\n",
            "           5       0.99      0.96      0.97       481\n",
            "           6       1.00      1.00      1.00       543\n",
            "           7       1.00      1.00      1.00       548\n",
            "           8       1.00      1.00      1.00       509\n",
            "           9       0.96      0.96      0.96       503\n",
            "          10       0.91      0.97      0.94       612\n",
            "\n",
            "    accuracy                           0.98      5990\n",
            "   macro avg       0.98      0.98      0.98      5990\n",
            "weighted avg       0.98      0.98      0.98      5990\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(df_vectorized_test.columns)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8b_avMdq6KY6",
        "outputId": "c1f36262-85c8-4df0-886e-7f172c5bea76"
      },
      "execution_count": 57,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Index(['text', ' a a', ' a a ', ' a af', ' a am', ' a b', ' a ba', ' a be',\n",
            "       ' a bo', ' a bu',\n",
            "       ...\n",
            "       'ṱhis', 'ṱhise', 'ṱhoh', 'ṱhoho', 'ṱhoḓ', 'ṱo ḓ', 'ṱuku', 'ṱuku ',\n",
            "       'ṱuwe', 'ṱuwed'],\n",
            "      dtype='object', length=50001)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_submission.index = df_vectorized_test['index'].astype(int)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 599
        },
        "id": "-7D4b6b98Qzs",
        "outputId": "80951fd5-d3ea-4892-87f9-8befcc3d4363"
      },
      "execution_count": 64,
      "outputs": [
        {
          "output_type": "error",
          "ename": "KeyError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3801\u001b[0m             \u001b[0;32mtry\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3802\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3803\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/_libs/index.pyx\u001b[0m in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;32mpandas/_libs/hashtable_class_helper.pxi\u001b[0m in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 'index'",
            "\nThe above exception was the direct cause of the following exception:\n",
            "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-64-253474711777>\u001b[0m in \u001b[0;36m<cell line: 1>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mdf_submission\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mindex\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf_vectorized_test\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'index'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mastype\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3805\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mnlevels\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3806\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_getitem_multilevel\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3807\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3808\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_integer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3809\u001b[0m                 \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.10/dist-packages/pandas/core/indexes/base.py\u001b[0m in \u001b[0;36mget_loc\u001b[0;34m(self, key, method, tolerance)\u001b[0m\n\u001b[1;32m   3802\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_engine\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_loc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcasted_key\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3803\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mKeyError\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 3804\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0merr\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   3805\u001b[0m             \u001b[0;32mexcept\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   3806\u001b[0m                 \u001b[0;31m# If we have a listlike key, _check_indexing_error will raise\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyError\u001b[0m: 'index'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "y_pred_submission = y_pred_nb\n",
        "\n",
        "# Convert 'lang_id' back to strings\n",
        "y_pred_submission_strings = label_encoder.inverse_transform(y_pred_submission)\n",
        "\n",
        "# Creating a DataFrame for the submission\n",
        "df_submission = pd.DataFrame({'lang_id': y_pred_submission_strings})\n",
        "\n",
        "# Displaying the DataFrame for submission\n",
        "df_submission.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "FmsKZa0R6OdQ",
        "outputId": "376aa399-dd31-4f11-b88c-e6ce2b52471c"
      },
      "execution_count": 58,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  lang_id\n",
              "0     ssw\n",
              "1     eng\n",
              "2     nbl\n",
              "3     nso\n",
              "4     sot"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f0d368c6-cf33-4a87-b20f-b8252d7a37a5\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>lang_id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>ssw</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>eng</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>nbl</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>nso</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>sot</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f0d368c6-cf33-4a87-b20f-b8252d7a37a5')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f0d368c6-cf33-4a87-b20f-b8252d7a37a5 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f0d368c6-cf33-4a87-b20f-b8252d7a37a5');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-5f2e8bc2-b240-4537-8a95-e38829b8579a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-5f2e8bc2-b240-4537-8a95-e38829b8579a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-5f2e8bc2-b240-4537-8a95-e38829b8579a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 58
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from sklearn.naive_bayes import MultinomialNB\n",
        "from sklearn.model_selection import train_test_split\n",
        "from sklearn.metrics import accuracy_score, classification_report\n",
        "\n",
        "# Assuming df_vectorized_clean contains 'text' and 'lang_id_encoded' columns\n",
        "\n",
        "# Extracting the response variable\n",
        "y_train = df_vectorized_clean[:len(df_vectorized_clean)]['lang_id_encoded']\n",
        "\n",
        "# Separating predictor variables from the response variable\n",
        "X_train = df_vectorized_clean[:len(df_vectorized_clean)].drop(\"lang_id_encoded\", axis=\"columns\")\n",
        "\n",
        "# Split the data into training and testing sets\n",
        "X_train, X_test, y_train, y_test = train_test_split(X_train, y_train, test_size=0.2, random_state=42)\n",
        "\n",
        "# Create a pipeline with CountVectorizer and Multinomial Naive Bayes\n",
        "pipeline_nb = Pipeline([\n",
        "    ('vectorizer', CountVectorizer()),\n",
        "    ('classifier', MultinomialNB())\n",
        "])\n",
        "\n",
        "# Fit the pipeline on the training data\n",
        "pipeline_nb.fit(X_train['text'], y_train)\n",
        "\n",
        "# Predict on the test data\n",
        "y_pred_nb = pipeline_nb.predict(X_test['text'])\n",
        "\n",
        "# Evaluate the Multinomial Naive Bayes model\n",
        "accuracy_nb = accuracy_score(y_test, y_pred_nb)\n",
        "classification_rep_nb = classification_report(y_test, y_pred_nb)\n",
        "\n",
        "# Print the results for Multinomial Naive Bayes\n",
        "print(\"Multinomial Naive Bayes Model:\")\n",
        "print(f\"Accuracy: {accuracy_nb}\")\n",
        "print(\"\\nClassification Report:\\n\", classification_rep_nb)\n"
      ],
      "metadata": {
        "id": "rLz7I5WPwM_E",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "67603c65-3e64-4473-8ca1-d7e7c79acf37"
      },
      "execution_count": 54,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Multinomial Naive Bayes Model:\n",
            "Accuracy: 0.9984974958263773\n",
            "\n",
            "Classification Report:\n",
            "               precision    recall  f1-score   support\n",
            "\n",
            "           0       1.00      1.00      1.00       553\n",
            "           1       0.99      1.00      1.00       603\n",
            "           2       1.00      1.00      1.00       473\n",
            "           3       1.00      1.00      1.00       559\n",
            "           4       1.00      1.00      1.00       606\n",
            "           5       1.00      1.00      1.00       481\n",
            "           6       1.00      1.00      1.00       543\n",
            "           7       1.00      1.00      1.00       548\n",
            "           8       1.00      1.00      1.00       509\n",
            "           9       1.00      1.00      1.00       503\n",
            "          10       1.00      0.99      1.00       612\n",
            "\n",
            "    accuracy                           1.00      5990\n",
            "   macro avg       1.00      1.00      1.00      5990\n",
            "weighted avg       1.00      1.00      1.00      5990\n",
            "\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Assuming df_vectorized_test_clean contains 'text' column\n",
        "\n",
        "# Extracting the text data from the test DataFrame\n",
        "X_submission = df_vectorized_clean['text']\n",
        "\n",
        "# Predict on the test data using the trained pipeline\n",
        "y_pred_submission = pipeline_nb.predict(X_submission)\n",
        "\n",
        "# Convert 'lang_id' back to strings\n",
        "y_pred_submission_strings = label_encoder.inverse_transform(y_pred_submission)\n",
        "\n",
        "# Creating a DataFrame for the submission\n",
        "df_submission = pd.DataFrame({'lang_id': y_pred_submission_strings})\n",
        "\n",
        "# Ensure the index is in numbers\n",
        "df_submission.Index = df_vectorized_clean['lang_id_encoded'].astype(int)\n",
        "\n",
        "# Save the submission to a CSV file\n",
        "df_submission.to_csv('submission.csv')\n",
        "\n",
        "# Displaying the DataFrame for submission\n",
        "df_submission.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 261
        },
        "id": "JUlSW6H17CTY",
        "outputId": "000c8813-a87e-483c-b330-e4cdce2628f8"
      },
      "execution_count": 66,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-66-cfbe23b8fcd0>:16: UserWarning: Pandas doesn't allow columns to be created via a new attribute name - see https://pandas.pydata.org/pandas-docs/stable/indexing.html#attribute-access\n",
            "  df_submission.Index = df_vectorized_clean['lang_id_encoded'].astype(int)\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  lang_id\n",
              "0     xho\n",
              "1     xho\n",
              "2     eng\n",
              "3     nso\n",
              "4     ven"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-4ce72fac-24b5-4dcd-97d8-cf8ad9a6b33b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>lang_id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>xho</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>xho</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>eng</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>nso</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ven</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-4ce72fac-24b5-4dcd-97d8-cf8ad9a6b33b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-4ce72fac-24b5-4dcd-97d8-cf8ad9a6b33b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-4ce72fac-24b5-4dcd-97d8-cf8ad9a6b33b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c180e307-9a54-4763-91c4-8dc5e8ad2f64\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c180e307-9a54-4763-91c4-8dc5e8ad2f64')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c180e307-9a54-4763-91c4-8dc5e8ad2f64 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 66
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Assuming df_vectorized_test_clean contains 'text' column\n",
        "\n",
        "# Extracting the text data from the test DataFrame\n",
        "X_submission = df_vectorized_test['text']\n",
        "\n",
        "# Predict on the test data using the trained pipeline\n",
        "y_pred_submission = pipeline_nb.predict(X_submission)\n",
        "\n",
        "# Convert 'lang_id' back to strings\n",
        "y_pred_submission_strings = label_encoder.inverse_transform(y_pred_submission)\n",
        "\n",
        "# Creating a DataFrame for the submission\n",
        "df_submission = pd.DataFrame({'lang_id': y_pred_submission_strings})\n",
        "\n",
        "# Save the submission to a CSV file\n",
        "df_submission.to_csv('submission.csv', index=True)  # index=True to include default integer index\n",
        "\n",
        "# Displaying the DataFrame for submission\n",
        "df_submission.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "Mc03xuk782LD",
        "outputId": "f84cd80c-e3cb-4e1f-f1a9-b65af9fecce7"
      },
      "execution_count": 65,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  lang_id\n",
              "0     xho\n",
              "1     xho\n",
              "2     eng\n",
              "3     nso\n",
              "4     ven"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0f6b808c-63f1-4b81-8505-7198b07b5332\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>lang_id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>xho</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>xho</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>eng</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>nso</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ven</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0f6b808c-63f1-4b81-8505-7198b07b5332')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-0f6b808c-63f1-4b81-8505-7198b07b5332 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-0f6b808c-63f1-4b81-8505-7198b07b5332');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2c582608-3b35-4d28-b84c-38f8dc284a78\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2c582608-3b35-4d28-b84c-38f8dc284a78')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2c582608-3b35-4d28-b84c-38f8dc284a78 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 65
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Assuming df_submission is your DataFrame\n",
        "\n",
        "# Reset the index and drop the old index column\n",
        "df_submission.reset_index(drop=True, inplace=True)\n",
        "\n",
        "# Displaying the DataFrame for submission\n",
        "df_submission.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "UMQzP9Or-NeW",
        "outputId": "60d22a90-cc19-4901-f069-13c809e9488a"
      },
      "execution_count": 69,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "  lang_id\n",
              "0     xho\n",
              "1     xho\n",
              "2     eng\n",
              "3     nso\n",
              "4     ven"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f13448a1-be64-4406-a1fd-3fe7f43597fd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>lang_id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>xho</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>xho</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>eng</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>nso</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>ven</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f13448a1-be64-4406-a1fd-3fe7f43597fd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f13448a1-be64-4406-a1fd-3fe7f43597fd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f13448a1-be64-4406-a1fd-3fe7f43597fd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-2c4e641f-b2b1-4fd4-a6d8-f6b28112ac69\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2c4e641f-b2b1-4fd4-a6d8-f6b28112ac69')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-2c4e641f-b2b1-4fd4-a6d8-f6b28112ac69 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 69
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [],
      "metadata": {
        "id": "tmNjBlX9813G"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Assuming df_submission is your DataFrame\n",
        "\n",
        "# Reset the index without dropping the old index column\n",
        "df_submission.reset_index(inplace=True)\n",
        "\n",
        "# Displaying the DataFrame for submission\n",
        "df_submission.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "xu46kGHz-UWp",
        "outputId": "5cd2a5fd-cffe-4f1f-b02c-d603cb97dd46"
      },
      "execution_count": 70,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   index lang_id\n",
              "0      0     xho\n",
              "1      1     xho\n",
              "2      2     eng\n",
              "3      3     nso\n",
              "4      4     ven"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f25dded6-453d-4620-a80e-f9fdf31e6f0b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>lang_id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>xho</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>xho</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>eng</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>nso</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>ven</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f25dded6-453d-4620-a80e-f9fdf31e6f0b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-f25dded6-453d-4620-a80e-f9fdf31e6f0b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-f25dded6-453d-4620-a80e-f9fdf31e6f0b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-bfca3e7b-ba78-4e7e-9f14-f60d6aec5f84\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bfca3e7b-ba78-4e7e-9f14-f60d6aec5f84')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-bfca3e7b-ba78-4e7e-9f14-f60d6aec5f84 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 70
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Assuming df_submission is your DataFrame\n",
        "\n",
        "# Reset the index and drop the old index column\n",
        "df_submission.reset_index(drop=True, inplace=True)\n",
        "\n",
        "# Displaying the DataFrame for submission\n",
        "df_submission.head()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 206
        },
        "id": "8cOHenWu-lxO",
        "outputId": "da2dafa8-f10f-454a-ad70-0b65fd96a998"
      },
      "execution_count": 71,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   index lang_id\n",
              "0      0     xho\n",
              "1      1     xho\n",
              "2      2     eng\n",
              "3      3     nso\n",
              "4      4     ven"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-10e91df9-2505-48f9-a74c-b9e0469a7780\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>index</th>\n",
              "      <th>lang_id</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>xho</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>xho</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2</td>\n",
              "      <td>eng</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>3</td>\n",
              "      <td>nso</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>4</td>\n",
              "      <td>ven</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-10e91df9-2505-48f9-a74c-b9e0469a7780')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-10e91df9-2505-48f9-a74c-b9e0469a7780 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-10e91df9-2505-48f9-a74c-b9e0469a7780');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9d7801d1-85cc-4b2a-9354-30e3f9eed803\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9d7801d1-85cc-4b2a-9354-30e3f9eed803')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9d7801d1-85cc-4b2a-9354-30e3f9eed803 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 71
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#Save the submission to a CSV file without adding an extra column for the index\n",
        "df_submission.to_csv('submission.csv', index=False)"
      ],
      "metadata": {
        "id": "Rio5usDX-rC0"
      },
      "execution_count": 73,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.13"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}